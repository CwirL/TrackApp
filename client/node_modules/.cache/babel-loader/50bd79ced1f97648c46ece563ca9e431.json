{"ast":null,"code":"var _jsxFileName = \"/home/wilmer/Escritorio/trackApp/client/src/components/RealTime.js\";\nimport React, { Component } from \"react\";\nimport NavBar from \"./navegation/NavBar\";\nimport RealMap from \"./real/RealMap\";\nimport CheckCars from \"./real/CheckCars\";\nimport { Grid, Container, Segment } from \"semantic-ui-react\";\nconst styles = {\n  text: {\n    color: \"white\"\n  },\n  mapContainer: {\n    height: \"500px\",\n    padding: \"0\",\n    margin: \"0\"\n  }\n};\nexport default class RealTime extends Component {\n  constructor() {\n    super();\n\n    this.getUser = async () => {\n      const reqBody = {\n        email: \"will.canti2697@gmail.com\"\n      };\n      const req = {\n        method: \"POST\",\n        body: JSON.stringify(reqBody),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      };\n\n      try {\n        let res = await fetch(\"http://192.168.1.8:5000/track/api/getUser\", req);\n        let data = await res.json();\n        let cars = [];\n        let plates = [];\n        let records = [];\n        data.cars.forEach(car => {\n          records.push([]);\n          cars = [...cars, {\n            plate: car.plate,\n            active: true\n          }];\n          plates = [...plates, car.plate];\n        });\n        this.setState({\n          records,\n          plates,\n          cars,\n          userLoaded: true\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    this.handleChangeCheckCar = (ind, e) => {\n      let cars = this.state.cars;\n      let plates = [];\n      cars[ind].active = !cars[ind].active;\n      cars.forEach(car => {\n        if (car.active) {\n          plates = [...plates, car.plate];\n        }\n      });\n      console.table(plates); // console.table(cars);\n\n      this.setState({\n        cars,\n        plates\n      });\n    };\n\n    this.getRecords = async () => {\n      const records = this.state.records;\n      const reqBody = {\n        email: \"will.canti2697@gmail.com\",\n        plates: plates\n      };\n      const req = {\n        method: \"POST\",\n        body: JSON.stringify(reqBody),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      };\n\n      try {\n        const res = await fetch(\"http://192.168.1.8:5000/track/api/lastPosArr\", req);\n        const curPosArr = await res.json();\n        console.log(curPosArr);\n        curPosArr.map((curPos, i) => {\n          records[i] = [...records[i], {\n            lat: curPos.latitud,\n            lng: curPos.longitud\n          }];\n        });\n        this.setState({\n          records\n        });\n        console.log(records);\n      } catch (error) {\n        this.setState({\n          mess: \"Was not able to connect to the dataBase\"\n        });\n        console.log(error.message);\n      }\n    };\n\n    this.state = {\n      currentPos: null,\n      path: [],\n      mess: \"Loading\",\n      cars: [],\n      plates: [],\n      records: [],\n      userLoaded: false\n    };\n  }\n\n  async componentDidMount() {\n    await this.getUser();\n    setInterval(async () => {\n      await this.getRecords();\n    }, 5000); // await this.getLastPosition();\n    // await this.getRecords();\n  }\n\n  render() {\n    const _this$state = this.state,\n          currentPos = _this$state.currentPos,\n          path = _this$state.path,\n          loaded = _this$state.loaded,\n          mess = _this$state.mess,\n          cars = _this$state.cars,\n          userLoaded = _this$state.userLoaded;\n    console.log(this.state.plates);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(NavBar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }), React.createElement(Grid, {\n      stackable: true,\n      columns: 2,\n      divided: true,\n      padded: true,\n      inverted: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      width: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(Segment, {\n      color: \"black\",\n      inverted: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, userLoaded ? React.createElement(CheckCars, {\n      cars: cars,\n      handleChange: this.handleChangeCheckCar,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, \"Loading\"))), React.createElement(Grid.Column, {\n      width: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, loaded ? React.createElement(Segment, {\n      color: \"black\",\n      inverted: true,\n      style: styles.mapContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(RealMap, {\n      currentPos: currentPos,\n      path: path,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    })) : React.createElement(\"div\", {\n      style: styles.text,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, mess))));\n  }\n\n}","map":{"version":3,"sources":["/home/wilmer/Escritorio/trackApp/client/src/components/RealTime.js"],"names":["React","Component","NavBar","RealMap","CheckCars","Grid","Container","Segment","styles","text","color","mapContainer","height","padding","margin","RealTime","constructor","getUser","reqBody","email","req","method","body","JSON","stringify","headers","res","fetch","data","json","cars","plates","records","forEach","car","push","plate","active","setState","userLoaded","err","console","log","handleChangeCheckCar","ind","e","state","table","getRecords","curPosArr","map","curPos","i","lat","latitud","lng","longitud","error","mess","message","currentPos","path","componentDidMount","setInterval","render","loaded"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport NavBar from \"./navegation/NavBar\";\nimport RealMap from \"./real/RealMap\";\nimport CheckCars from \"./real/CheckCars\";\nimport { Grid, Container, Segment } from \"semantic-ui-react\";\nconst styles = {\n  text: {\n    color: \"white\"\n  },\n  mapContainer: {\n    height: \"500px\",\n    padding: \"0\",\n    margin: \"0\"\n  }\n};\n\nexport default class RealTime extends Component {\n  constructor() {\n    super();\n    this.state = {\n      currentPos: null,\n      path: [],\n      mess: \"Loading\",\n      cars: [],\n      plates: [],\n      records: [],\n      userLoaded: false,\n    };\n  }\n  async componentDidMount() {\n    await this.getUser();\n    setInterval(async () => {\n      await this.getRecords();\n    }, 5000);\n    // await this.getLastPosition();\n    // await this.getRecords();\n  }\n\n  getUser = async () => {\n    const reqBody = { email: \"will.canti2697@gmail.com\" };\n    const req = {\n      method: \"POST\",\n      body: JSON.stringify(reqBody),\n      headers: { \"Content-Type\": \"application/json\" }\n    };\n    try {\n      let res = await fetch(\"http://192.168.1.8:5000/track/api/getUser\", req);\n      let data = await res.json();\n      let cars = [];\n      let plates = [];\n      let records = [];\n      data.cars.forEach(car => {\n        records.push([]);\n        cars = [...cars, { plate: car.plate, active: true }];\n        plates = [...plates, car.plate];\n      });\n      this.setState({\n        records,\n        plates,\n        cars,\n        userLoaded: true\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  handleChangeCheckCar = (ind, e) => {\n    let cars = this.state.cars;\n    let plates = [];\n    cars[ind].active = !cars[ind].active;\n    cars.forEach(car => {\n      if (car.active) {\n        plates = [...plates, car.plate];\n      }\n    });\n\n    console.table(plates);\n    // console.table(cars);\n    this.setState({ cars, plates });\n  };\n\n  getRecords = async () => {\n    const { records } = this.state;\n    const reqBody = { email: \"will.canti2697@gmail.com\", plates: plates };\n    const req = {\n      method: \"POST\",\n      body: JSON.stringify(reqBody),\n      headers: { \"Content-Type\": \"application/json\" }\n    };\n    try {\n      const res = await fetch(\n        \"http://192.168.1.8:5000/track/api/lastPosArr\",\n        req\n      );\n      const curPosArr = await res.json();\n      console.log(curPosArr);\n      curPosArr.map((curPos, i) => {\n        records[i] = [\n          ...records[i],\n          { lat: curPos.latitud, lng: curPos.longitud }\n        ];\n      });\n      this.setState({ records });\n\n      console.log(records);\n    } catch (error) {\n      this.setState({ mess: \"Was not able to connect to the dataBase\" });\n      console.log(error.message);\n    }\n  };\n\n  render() {\n    const { currentPos, path, loaded, mess, cars, userLoaded } = this.state;\n    console.log(this.state.plates);\n    return (\n      <div>\n        <NavBar />\n        <Grid stackable columns={2} divided padded inverted>\n          <Grid.Column width={4}>\n            <Segment color=\"black\" inverted>\n              {userLoaded ? (\n                <CheckCars\n                  cars={cars}\n                  handleChange={this.handleChangeCheckCar}\n                />\n              ) : (\n                <div>Loading</div>\n              )}\n            </Segment>\n          </Grid.Column>\n          <Grid.Column width={12}>\n            {loaded ? (\n              <Segment color=\"black\" inverted style={styles.mapContainer}>\n                <RealMap currentPos={currentPos} path={path} />\n              </Segment>\n            ) : (\n              <div style={styles.text}>{mess}</div>\n            )}\n          </Grid.Column>\n        </Grid>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}