{"ast":null,"code":"var _jsxFileName = \"/home/wilmer/Escritorio/trackApp/client/src/components/RealTime.js\";\nimport React, { Component } from \"react\";\nimport NavBar from \"./navegation/NavBar\";\nimport RealMap from \"./real/RealMap\";\nimport CheckCars from \"./real/CheckCars\";\nimport { Grid, Container, Segment } from \"semantic-ui-react\";\nconst styles = {\n  text: {\n    color: \"white\"\n  },\n  mapContainer: {\n    height: \"500px\",\n    padding: \"0\",\n    margin: \"0\"\n  }\n};\nexport default class RealTime extends Component {\n  constructor() {\n    super();\n\n    this.getUser = async () => {\n      const reqBody = {\n        email: \"will.canti2697@gmail.com\"\n      };\n      const req = {\n        method: \"POST\",\n        body: JSON.stringify(reqBody),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      };\n\n      try {\n        let res = await fetch(\"http://192.168.1.8:5000/track/api/getUser\", req);\n        let data = await res.json();\n        let cars = [];\n        let plates = [];\n        data.cars.forEach(car => {\n          cars = [...cars, {\n            plate: car.plate,\n            active: true\n          }];\n          plates = [...plates, car.plate];\n        });\n        this.setState({\n          plates,\n          cars,\n          userLoaded: true\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    this.handleChangeCheckCar = (ind, e) => {\n      let cars = this.state.cars;\n      let plates = [];\n      cars[ind].active = !cars[ind].active;\n      cars.forEach(car => {\n        if (car.active) {\n          plates = [...plates, car.plate];\n        }\n      });\n      console.table(plates); // console.table(cars);\n\n      this.setState({\n        cars,\n        plates\n      });\n    };\n\n    this.getCurrentPosition = async () => {\n      const plates = this.state.plates;\n      const reqBody = {\n        email: \"will.canti2697@gmail.com\",\n        plates: plates\n      };\n      const req = {\n        method: \"POST\",\n        body: JSON.stringify(reqBody),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      };\n\n      try {\n        const res = await fetch(\"http://192.168.1.8:5000/track/api/lastPosArr\", req);\n        const curPosArr = await res.json();\n        let currentPosition = [];\n        curPosArr.map((curPos, i) => {\n          currentPosition.push([]);\n          currentPosition[i] = [...currentPosition[i], {\n            lat: curPos.latitud,\n            lng: curPos.longitud\n          }];\n        });\n        console.log(currentPosition);\n      } catch (error) {\n        this.setState({\n          mess: \"Was not able to connect to the dataBase\"\n        });\n        console.log(error.message);\n      }\n    };\n\n    this.getLastPosition = async () => {\n      const reqBody = {\n        email: \"will.canti2697@gmail.com\",\n        plate: \"CKN-363\"\n      };\n      const req = {\n        method: \"POST\",\n        body: JSON.stringify(reqBody),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      };\n\n      try {\n        const res = await fetch(\"http://192.168.1.8:5000/track/api/lastPos\", req);\n        const coords = await res.json();\n        let actPos = {\n          lat: coords.latitud,\n          lng: coords.longitud\n        };\n        this.setState({\n          currentPos: actPos,\n          path: [...this.state.path, actPos],\n          loaded: true\n        });\n      } catch (error) {\n        this.setState({\n          mess: \"Was not able to connect to the dataBase\"\n        });\n        console.log(error.message);\n      }\n    };\n\n    this.state = {\n      currentPos: null,\n      path: [],\n      mess: \"Loading\",\n      cars: [],\n      plates: [],\n      records: [],\n      userLoaded: false\n    };\n  }\n\n  async componentDidMount() {\n    // setInterval(async () => {\n    //   await this.getLastPosition();\n    // }, 5000);\n    // await this.getLastPosition();\n    await this.getUser();\n    await this.getCurrentPosition();\n  }\n\n  render() {\n    const _this$state = this.state,\n          currentPos = _this$state.currentPos,\n          path = _this$state.path,\n          loaded = _this$state.loaded,\n          mess = _this$state.mess,\n          cars = _this$state.cars,\n          userLoaded = _this$state.userLoaded;\n    console.log(this.state.plates);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(NavBar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }), React.createElement(Grid, {\n      stackable: true,\n      columns: 2,\n      divided: true,\n      padded: true,\n      inverted: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      width: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(Segment, {\n      color: \"black\",\n      inverted: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, userLoaded ? React.createElement(CheckCars, {\n      cars: cars,\n      handleChange: this.handleChangeCheckCar,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"Loading\"))), React.createElement(Grid.Column, {\n      width: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, loaded ? React.createElement(Segment, {\n      color: \"black\",\n      inverted: true,\n      style: styles.mapContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, React.createElement(RealMap, {\n      currentPos: currentPos,\n      path: path,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    })) : React.createElement(\"div\", {\n      style: styles.text,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, mess))));\n  }\n\n}","map":{"version":3,"sources":["/home/wilmer/Escritorio/trackApp/client/src/components/RealTime.js"],"names":["React","Component","NavBar","RealMap","CheckCars","Grid","Container","Segment","styles","text","color","mapContainer","height","padding","margin","RealTime","constructor","getUser","reqBody","email","req","method","body","JSON","stringify","headers","res","fetch","data","json","cars","plates","forEach","car","plate","active","setState","userLoaded","err","console","log","handleChangeCheckCar","ind","e","state","table","getCurrentPosition","curPosArr","currentPosition","map","curPos","i","push","lat","latitud","lng","longitud","error","mess","message","getLastPosition","coords","actPos","currentPos","path","loaded","records","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport NavBar from \"./navegation/NavBar\";\nimport RealMap from \"./real/RealMap\";\nimport CheckCars from \"./real/CheckCars\";\nimport { Grid, Container, Segment } from \"semantic-ui-react\";\nconst styles = {\n  text: {\n    color: \"white\"\n  },\n  mapContainer: {\n    height: \"500px\",\n    padding: \"0\",\n    margin: \"0\"\n  }\n};\n\nexport default class RealTime extends Component {\n  constructor() {\n    super();\n    this.state = {\n      currentPos: null,\n      path: [],\n      mess: \"Loading\",\n      cars: [],\n      plates: [],\n      records: [],\n      userLoaded: false\n    };\n  }\n  async componentDidMount() {\n    // setInterval(async () => {\n    //   await this.getLastPosition();\n    // }, 5000);\n    // await this.getLastPosition();\n    await this.getUser();\n    await this.getCurrentPosition();\n  }\n\n  getUser = async () => {\n    const reqBody = { email: \"will.canti2697@gmail.com\" };\n    const req = {\n      method: \"POST\",\n      body: JSON.stringify(reqBody),\n      headers: { \"Content-Type\": \"application/json\" }\n    };\n    try {\n      let res = await fetch(\"http://192.168.1.8:5000/track/api/getUser\", req);\n      let data = await res.json();\n      let cars = [];\n      let plates = [];\n      data.cars.forEach(car => {\n        cars = [...cars, { plate: car.plate, active: true }];\n        plates = [...plates, car.plate];\n      });\n      this.setState({\n        plates,\n        cars,\n        userLoaded: true\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  handleChangeCheckCar = (ind, e) => {\n    let cars = this.state.cars;\n    let plates = [];\n    cars[ind].active = !cars[ind].active;\n    cars.forEach(car => {\n      if (car.active) {\n        plates = [...plates, car.plate];\n      }\n    });\n\n    console.table(plates);\n    // console.table(cars);\n    this.setState({ cars, plates });\n  };\n\n  getCurrentPosition = async () => {\n    const { plates } = this.state;\n    const reqBody = { email: \"will.canti2697@gmail.com\", plates: plates };\n    const req = {\n      method: \"POST\",\n      body: JSON.stringify(reqBody),\n      headers: { \"Content-Type\": \"application/json\" }\n    };\n    try {\n      const res = await fetch(\n        \"http://192.168.1.8:5000/track/api/lastPosArr\",\n        req\n      );\n      const curPosArr = await res.json();\n      let currentPosition = [];\n      curPosArr.map((curPos, i) => {\n        currentPosition.push([]);\n        currentPosition[i] = [...currentPosition[i], { lat: curPos.latitud, lng: curPos.longitud }];\n      });\n      console.log(currentPosition);\n    } catch (error) {\n      this.setState({ mess: \"Was not able to connect to the dataBase\" });\n      console.log(error.message);\n    }\n  };\n\n  getLastPosition = async () => {\n    const reqBody = { email: \"will.canti2697@gmail.com\", plate: \"CKN-363\" };\n    const req = {\n      method: \"POST\",\n      body: JSON.stringify(reqBody),\n      headers: { \"Content-Type\": \"application/json\" }\n    };\n    try {\n      const res = await fetch(\"http://192.168.1.8:5000/track/api/lastPos\", req);\n      const coords = await res.json();\n      let actPos = { lat: coords.latitud, lng: coords.longitud };\n      this.setState({\n        currentPos: actPos,\n        path: [...this.state.path, actPos],\n        loaded: true\n      });\n    } catch (error) {\n      this.setState({ mess: \"Was not able to connect to the dataBase\" });\n      console.log(error.message);\n    }\n  };\n  render() {\n    const { currentPos, path, loaded, mess, cars, userLoaded } = this.state;\n    console.log(this.state.plates);\n    return (\n      <div>\n        <NavBar />\n        <Grid stackable columns={2} divided padded inverted>\n          <Grid.Column width={4}>\n            <Segment color=\"black\" inverted>\n              {userLoaded ? (\n                <CheckCars\n                  cars={cars}\n                  handleChange={this.handleChangeCheckCar}\n                />\n              ) : (\n                <div>Loading</div>\n              )}\n            </Segment>\n          </Grid.Column>\n          <Grid.Column width={12}>\n            {loaded ? (\n              <Segment color=\"black\" inverted style={styles.mapContainer}>\n                <RealMap currentPos={currentPos} path={path} />\n              </Segment>\n            ) : (\n              <div style={styles.text}>{mess}</div>\n            )}\n          </Grid.Column>\n        </Grid>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}