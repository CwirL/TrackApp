{"ast":null,"code":"var _jsxFileName = \"/home/wilmer/Escritorio/trackApp/client/src/components/RealTime.js\";\nimport React, { Component } from \"react\";\nimport NavBar from \"./navegation/NavBar\";\nimport RealMap from \"./real/RealMap\";\nimport CheckCars from \"./real/CheckCars\";\nimport CarData from \"./real/CarData\";\nimport ChooseBar from \"./real/ChooseBar\";\nimport { Grid, Segment } from \"semantic-ui-react\";\nconst styles = {\n  text: {\n    color: \"white\"\n  },\n  mapContainer: {\n    height: \"500px\",\n    padding: \"0\",\n    margin: \"0\"\n  },\n  btn: {\n    fontSize: \"20px\",\n    marginBottom: \"22px\"\n  }\n};\nexport default class RealTime extends Component {\n  constructor() {\n    super();\n\n    this.getUser = async () => {\n      const reqBody = {\n        email: \"will.canti2697@gmail.com\"\n      };\n      const req = {\n        method: \"POST\",\n        body: JSON.stringify(reqBody),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      };\n\n      try {\n        let res = await fetch(\"http://3.83.109.19:5000/track/api/getUser\", req);\n        let data = await res.json();\n        let cars = [];\n        let plates = [];\n        data.cars.forEach(car => {\n          cars = [...cars, {\n            plate: car.plate,\n            active: true,\n            records: []\n          }];\n          plates = [...plates, car.plate];\n        });\n        this.setState({\n          plates,\n          cars,\n          userLoaded: true\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    this.handleChangeCheckCar = (ind, e) => {\n      let cars = this.state.cars;\n      cars[ind].active = !cars[ind].active; // console.table(cars);\n\n      this.setState({\n        cars\n      });\n    };\n\n    this.getRecords = async () => {\n      const _this$state = this.state,\n            cars = _this$state.cars,\n            plates = _this$state.plates;\n      const reqBody = {\n        email: \"will.canti2697@gmail.com\",\n        plates: plates\n      };\n      const req = {\n        method: \"POST\",\n        body: JSON.stringify(reqBody),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      };\n\n      try {\n        const res = await fetch(\"http://3.83.109.19:5000/track/api/lastPosArr\", req);\n        const curPosArr = await res.json();\n        curPosArr.map(async (curPos, i) => {\n          const addressRes = await fetch(\"https://maps.googleapis.com/maps/api/geocode/json?&latlng=\".concat(curPos.latitud, \",\").concat(curPos.longitud, \"&key=AIzaSyDqV0nn953l7QAY_1GKVKcQO6Md2YW2W1o\"));\n          const address = await addressRes.json();\n          cars[i].address = address.results[2].formatted_address;\n          cars[i].records = [...cars[i].records, {\n            lat: curPos.latitud,\n            lng: curPos.longitud\n          }];\n        });\n        this.setState({\n          cars,\n          mapLoaded: true\n        });\n      } catch (error) {\n        this.setState({\n          mess: \"Was not able to connect to the dataBase\"\n        });\n        console.log(error.message);\n      }\n    };\n\n    this.handleBounds = () => {\n      let _this$state2 = this.state,\n          fitBounds = _this$state2.fitBounds,\n          controlBoundMess = _this$state2.controlBoundMess;\n      fitBounds = !fitBounds;\n\n      if (fitBounds) {\n        controlBoundMess = \"Following\";\n      } else {\n        controlBoundMess = \"Not follow\";\n      }\n\n      this.setState({\n        fitBounds,\n        controlBoundMess\n      });\n    };\n\n    this.state = {\n      path: [],\n      mess: \"Loading\",\n      cars: [],\n      plates: [],\n      records: [],\n      userLoaded: false,\n      mapLoaded: false,\n      fitBounds: true,\n      controlBoundMess: \"Following\"\n    };\n    this.btn = React.createRef();\n  }\n\n  async componentDidMount() {\n    await this.getUser();\n    await this.getRecords();\n  }\n\n  componentDidUpdate() {\n    if (this.state.mapLoaded) {\n      console.log(\"update after map loaded\");\n      setTimeout(async () => await this.getRecords(), 2000);\n    }\n  }\n\n  render() {\n    console.log(\"render\");\n    const _this$state3 = this.state,\n          mapLoaded = _this$state3.mapLoaded,\n          mess = _this$state3.mess,\n          cars = _this$state3.cars,\n          userLoaded = _this$state3.userLoaded,\n          fitBounds = _this$state3.fitBounds,\n          controlBoundMess = _this$state3.controlBoundMess;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(NavBar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }), React.createElement(Grid, {\n      stackable: true,\n      columns: 2,\n      divided: true,\n      padded: true,\n      inverted: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      width: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, userLoaded ? React.createElement(Segment, {\n      color: \"black\",\n      inverted: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, React.createElement(Button.Group, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, React.createElement(Button, {\n      disabled: visible,\n      onClick: this.handleShowClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, \"Show sidebar\"), React.createElement(Button, {\n      disabled: !visible,\n      onClick: this.handleHideClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, \"Hide sidebar\")), React.createElement(CheckCars, {\n      cars: cars,\n      handleChange: this.handleChangeCheckCar,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }), React.createElement(CarData, {\n      cars: cars,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    })) : React.createElement(\"div\", {\n      style: styles.text,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, mess)), React.createElement(Grid.Column, {\n      width: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, mapLoaded ? React.createElement(Segment, {\n      color: \"black\",\n      inverted: true,\n      style: styles.mapContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      style: styles.btn,\n      ref: this.btn,\n      onClick: this.handleBounds,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, controlBoundMess), React.createElement(RealMap, {\n      cars: cars,\n      btnBounds: this.btn,\n      bounds: fitBounds,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    })) : React.createElement(\"div\", {\n      style: styles.text,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, mess))));\n  }\n\n}","map":{"version":3,"sources":["/home/wilmer/Escritorio/trackApp/client/src/components/RealTime.js"],"names":["React","Component","NavBar","RealMap","CheckCars","CarData","ChooseBar","Grid","Segment","styles","text","color","mapContainer","height","padding","margin","btn","fontSize","marginBottom","RealTime","constructor","getUser","reqBody","email","req","method","body","JSON","stringify","headers","res","fetch","data","json","cars","plates","forEach","car","plate","active","records","setState","userLoaded","err","console","log","handleChangeCheckCar","ind","e","state","getRecords","curPosArr","map","curPos","i","addressRes","latitud","longitud","address","results","formatted_address","lat","lng","mapLoaded","error","mess","message","handleBounds","fitBounds","controlBoundMess","path","createRef","componentDidMount","componentDidUpdate","setTimeout","render","visible","handleShowClick","handleHideClick"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport NavBar from \"./navegation/NavBar\";\nimport RealMap from \"./real/RealMap\";\nimport CheckCars from \"./real/CheckCars\";\nimport CarData from \"./real/CarData\";\nimport ChooseBar from \"./real/ChooseBar\";\nimport { Grid, Segment } from \"semantic-ui-react\";\nconst styles = {\n  text: {\n    color: \"white\"\n  },\n  mapContainer: {\n    height: \"500px\",\n    padding: \"0\",\n    margin: \"0\"\n  },\n  btn: {\n    fontSize: \"20px\",\n    marginBottom: \"22px\"\n  }\n};\n\nexport default class RealTime extends Component {\n  constructor() {\n    super();\n    this.state = {\n      path: [],\n      mess: \"Loading\",\n      cars: [],\n      plates: [],\n      records: [],\n      userLoaded: false,\n      mapLoaded: false,\n      fitBounds: true,\n      controlBoundMess: \"Following\"\n    };\n    this.btn = React.createRef();\n  }\n  async componentDidMount() {\n    await this.getUser();\n    await this.getRecords();\n  }\n  componentDidUpdate() {\n    if (this.state.mapLoaded) {\n      console.log(\"update after map loaded\");\n      setTimeout(async () => await this.getRecords(), 2000);\n    }\n  }\n  getUser = async () => {\n    const reqBody = { email: \"will.canti2697@gmail.com\" };\n    const req = {\n      method: \"POST\",\n      body: JSON.stringify(reqBody),\n      headers: { \"Content-Type\": \"application/json\" }\n    };\n    try {\n      let res = await fetch(\"http://3.83.109.19:5000/track/api/getUser\", req);\n      let data = await res.json();\n      let cars = [];\n      let plates = [];\n      data.cars.forEach(car => {\n        cars = [...cars, { plate: car.plate, active: true, records: [] }];\n        plates = [...plates, car.plate];\n      });\n      this.setState({\n        plates,\n        cars,\n        userLoaded: true\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  handleChangeCheckCar = (ind, e) => {\n    let cars = this.state.cars;\n    cars[ind].active = !cars[ind].active;\n    // console.table(cars);\n    this.setState({ cars });\n  };\n\n  getRecords = async () => {\n    const { cars, plates } = this.state;\n    const reqBody = { email: \"will.canti2697@gmail.com\", plates: plates };\n    const req = {\n      method: \"POST\",\n      body: JSON.stringify(reqBody),\n      headers: { \"Content-Type\": \"application/json\" }\n    };\n    try {\n      const res = await fetch(\n        \"http://3.83.109.19:5000/track/api/lastPosArr\",\n        req\n      );\n      const curPosArr = await res.json();\n      curPosArr.map(async (curPos, i) => {\n        const addressRes = await fetch(\n          `https://maps.googleapis.com/maps/api/geocode/json?&latlng=${\n            curPos.latitud\n          },${curPos.longitud}&key=AIzaSyDqV0nn953l7QAY_1GKVKcQO6Md2YW2W1o`\n        );\n        const address = await addressRes.json();\n        cars[i].address = address.results[2].formatted_address;\n        cars[i].records = [\n          ...cars[i].records,\n          { lat: curPos.latitud, lng: curPos.longitud }\n        ];\n      });\n\n      this.setState({ cars, mapLoaded: true });\n    } catch (error) {\n      this.setState({ mess: \"Was not able to connect to the dataBase\" });\n      console.log(error.message);\n    }\n  };\n\n  handleBounds = () => {\n    let { fitBounds, controlBoundMess } = this.state;\n    fitBounds = !fitBounds;\n    if (fitBounds) {\n      controlBoundMess = \"Following\";\n    } else {\n      controlBoundMess = \"Not follow\";\n    }\n    this.setState({\n      fitBounds,\n      controlBoundMess\n    });\n  };\n  render() {\n    console.log(\"render\");\n    const {\n      mapLoaded,\n      mess,\n      cars,\n      userLoaded,\n      fitBounds,\n      controlBoundMess\n    } = this.state;\n\n    return (\n      <div>\n        <NavBar />\n        <Grid stackable columns={2} divided padded inverted>\n          <Grid.Column width={4}>\n            {userLoaded ? (\n              <Segment color=\"black\" inverted>\n                <Button.Group>\n                  <Button disabled={visible} onClick={this.handleShowClick}>\n                    Show sidebar\n                  </Button>\n                  <Button disabled={!visible} onClick={this.handleHideClick}>\n                    Hide sidebar\n                  </Button>\n                </Button.Group>\n                <CheckCars\n                  cars={cars}\n                  handleChange={this.handleChangeCheckCar}\n                />\n                <CarData cars={cars} />\n              </Segment>\n            ) : (\n              <div style={styles.text}>{mess}</div>\n            )}\n          </Grid.Column>\n          <Grid.Column width={12}>\n            {mapLoaded ? (\n              <Segment color=\"black\" inverted style={styles.mapContainer}>\n                <button\n                  style={styles.btn}\n                  ref={this.btn}\n                  onClick={this.handleBounds}\n                >\n                  {controlBoundMess}\n                </button>\n                <RealMap cars={cars} btnBounds={this.btn} bounds={fitBounds} />\n              </Segment>\n            ) : (\n              <div style={styles.text}>{mess}</div>\n            )}\n          </Grid.Column>\n        </Grid>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}