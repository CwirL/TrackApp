{"ast":null,"code":"var _jsxFileName = \"/home/wilmer/Escritorio/trackApp/client/src/components/RealTime.js\";\nimport React, { Component } from \"react\";\nimport NavBar from \"./navegation/NavBar\";\nimport RealMap from \"./real/RealMap\";\nimport { Grid, Container, Segment } from \"semantic-ui-react\";\nconst styles = {\n  text: {\n    color: \"white\"\n  },\n  mapContainer: {\n    height: \"500px\",\n    padding: \"0\",\n    margin: \"0\"\n  }\n};\nexport default class RealTime extends Component {\n  constructor() {\n    super();\n\n    this.getUser = async () => {\n      const reqBody = {\n        email: \"will.canti2697@gmail.com\"\n      };\n      const req = {\n        method: \"POST\",\n        body: JSON.stringify(reqBody),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      };\n      fetch(\"http://192.168.1.8:5000/track/api/getUser\", req).then(res => res.json()).then(data => {\n        console.log(data);\n        let cars = [];\n        data.cars.forEach(car => {\n          cars = [...cars, {\n            plate: car.plate,\n            active: false\n          }];\n        });\n        console.log(cars);\n      }).catch(err => console.log(err));\n    };\n\n    this.getLastPosition = async () => {\n      const reqBody = {\n        email: \"will.canti2697@gmail.com\",\n        plate: \"CKN-363\"\n      };\n      const req = {\n        method: \"POST\",\n        body: JSON.stringify(reqBody),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      };\n\n      try {\n        const res = await fetch(\"http://192.168.1.8:5000/track/api/lastPos\", req);\n        const coords = await res.json();\n        let actPos = {\n          lat: coords.latitud,\n          lng: coords.longitud\n        };\n        this.setState({\n          currentPos: actPos,\n          path: [...this.state.path, actPos],\n          loaded: true\n        });\n      } catch (error) {\n        this.setState({\n          mess: \"Was not able to connect to the dataBase\"\n        });\n        console.log(error.message);\n      }\n    };\n\n    this.state = {\n      currentPos: null,\n      path: [],\n      mess: \"Loading\",\n      cars: []\n    };\n  }\n\n  async componentDidMount() {\n    // setInterval(async () => {\n    //   await this.getLastPosition();\n    // }, 5000);\n    await this.getLastPosition();\n    await this.getUser();\n  }\n\n  render() {\n    const _this$state = this.state,\n          currentPos = _this$state.currentPos,\n          path = _this$state.path,\n          loaded = _this$state.loaded,\n          mess = _this$state.mess;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(NavBar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }), React.createElement(Grid, {\n      stackable: true,\n      columns: 2,\n      divided: true,\n      padded: true,\n      inverted: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      width: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(Segment, {\n      color: \"black\",\n      inverted: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \"Charts\")), React.createElement(Grid.Column, {\n      width: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, loaded ? React.createElement(Segment, {\n      color: \"black\",\n      inverted: true,\n      style: styles.mapContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(RealMap, {\n      currentPos: currentPos,\n      path: path,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    })) : React.createElement(\"div\", {\n      style: styles.text,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, mess))));\n  }\n\n}","map":{"version":3,"sources":["/home/wilmer/Escritorio/trackApp/client/src/components/RealTime.js"],"names":["React","Component","NavBar","RealMap","Grid","Container","Segment","styles","text","color","mapContainer","height","padding","margin","RealTime","constructor","getUser","reqBody","email","req","method","body","JSON","stringify","headers","fetch","then","res","json","data","console","log","cars","forEach","car","plate","active","catch","err","getLastPosition","coords","actPos","lat","latitud","lng","longitud","setState","currentPos","path","state","loaded","error","mess","message","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport NavBar from \"./navegation/NavBar\";\nimport RealMap from \"./real/RealMap\";\nimport { Grid, Container, Segment } from \"semantic-ui-react\";\nconst styles = {\n  text: {\n    color: \"white\"\n  },\n  mapContainer: {\n    height: \"500px\",\n    padding: \"0\",\n    margin: \"0\"\n  }\n};\n\nexport default class RealTime extends Component {\n  constructor() {\n    super();\n    this.state = {\n      currentPos: null,\n      path: [],\n      mess: \"Loading\",\n      cars: []\n    };\n  }\n  async componentDidMount() {\n    // setInterval(async () => {\n    //   await this.getLastPosition();\n    // }, 5000);\n    await this.getLastPosition();\n    await this.getUser();\n  }\n  getUser = async () => {\n    const reqBody = { email: \"will.canti2697@gmail.com\" };\n    const req = {\n      method: \"POST\",\n      body: JSON.stringify(reqBody),\n      headers: { \"Content-Type\": \"application/json\" }\n    };\n    fetch(\"http://192.168.1.8:5000/track/api/getUser\", req)\n      .then(res => res.json())\n      .then(data => {\n        console.log(data);\n        let cars = [];\n        data.cars.forEach(car => {\n          cars = [...cars, {plate: car.plate, active: false}];\n        });\n        console.log(cars);\n      })\n      .catch(err => console.log(err));\n  };\n  getLastPosition = async () => {\n    const reqBody = { email: \"will.canti2697@gmail.com\", plate: \"CKN-363\" };\n    const req = {\n      method: \"POST\",\n      body: JSON.stringify(reqBody),\n      headers: { \"Content-Type\": \"application/json\" }\n    };\n    try {\n      const res = await fetch(\"http://192.168.1.8:5000/track/api/lastPos\", req);\n      const coords = await res.json();\n      let actPos = { lat: coords.latitud, lng: coords.longitud };\n      this.setState({\n        currentPos: actPos,\n        path: [...this.state.path, actPos],\n        loaded: true\n      });\n    } catch (error) {\n      this.setState({ mess: \"Was not able to connect to the dataBase\" });\n      console.log(error.message);\n    }\n  };\n  render() {\n    const { currentPos, path, loaded, mess } = this.state;\n    return (\n      <div>\n        <NavBar />\n        <Grid stackable columns={2} divided padded inverted>\n          <Grid.Column width={4}>\n            <Segment color=\"black\" inverted>\n              Charts\n            </Segment>\n          </Grid.Column>\n          <Grid.Column width={12}>\n            {loaded ? (\n              <Segment color=\"black\" inverted style={styles.mapContainer}>\n                <RealMap currentPos={currentPos} path={path} />\n              </Segment>\n            ) : (\n              <div style={styles.text}>{mess}</div>\n            )}\n          </Grid.Column>\n        </Grid>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}